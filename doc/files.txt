Project Overview: Movie Recommender System
===============================================

This is a complete serverless movie recommendation system built on AWS, featuring semantic search, 
collaborative filtering, user management, and a modern Vue.js frontend. **Version 2.0** introduces 
a single Lambda function architecture with ONNX optimization and Lambda layers for dependency management.

BACKEND STRUCTURE:
===================

lambda_handler.py:
- **NEW: Single Lambda function entry point** with centralized routing
- Unified handler for all API endpoints using HTTP API Gateway
- Routes requests to appropriate function modules based on HTTP path
- Enhanced error handling and consistent response formatting
- Integrates all functionality: auth, recommendations, user data
- Supports all endpoints: /auth/*, /search, /content, /collaborative, /similar, /favorites, /reviews, /activity

lambda_functions/MovieAuthFunction.py:
- Handles user authentication and registration logic
- JWT token generation and validation with enhanced security
- Password hashing using bcrypt
- User account management functions
- Functions: register_user(), login_user(), refresh_token(), validate_token()

lambda_functions/MovieUserDataFunction.py:
- Manages user behavioral data and preferences logic
- Favorites list management and user reviews
- User activity tracking and account management
- Functions: get_favorites(), add_favorite(), remove_favorite(), get_reviews(), add_review(), etc.

lambda_functions/RecommendationFunctions.py:
- Core recommendation algorithms implementation with ONNX optimization
- Semantic search using ONNX-optimized sentence transformer models
- Content-based filtering using pre-computed movie embeddings
- Collaborative filtering based on user ratings and preferences
- Functions: semantic_search(), content_based_recommendations(), collaborative_filtering(), similar_movies()

SHARED UTILITIES:
================

utils/config.py:
- **NEW: Centralized configuration management module**
- Single source of truth for all environment variables
- Automatic validation of critical configuration parameters
- JWT, database, S3, and ML model configuration
- Support for local development endpoints
- CORS headers and feature flag management
- Enhanced security and maintainability

utils/config.py:
- **NEW: Centralized configuration management** for all environment variables
- Single source of truth for JWT, DynamoDB, S3, and API settings
- Automatic validation of critical configuration parameters
- Default values and environment-specific configurations
- Enhanced security with consistent configuration patterns

utils/database.py:
- **UPDATED: Enhanced database connection management**
- Integration with centralized Config module for settings
- Improved connection pooling and resource management
- Health checking and connection validation
- Consistent table access patterns across all functions

utils/utils_function.py:
- **ENHANCED: Shared utility functions** for all Lambda functions
- JWT token generation and validation with improved security
- Password hashing and validation using bcrypt
- User authentication and session management
- Input sanitization and validation utilities
- Consistent response formatting and error handling
- CORS header management for API Gateway

DEPLOYMENT AND INFRASTRUCTURE:
=============================

requirements.txt:
- **UPDATED: Optimized dependencies** for Lambda layers architecture
- Core dependencies: PyJWT, bcrypt, onnxruntime, tokenizers
- NumPy with version constraint (numpy<1.27.0)
- Separated into two Lambda layers for better performance

initial_setup/create_table.py:
- Creates 5 core DynamoDB tables required by the system
- Movies, Reviews, MovieRecommender_Users, MovieRecommender_Favorites, MovieRecommender_Activity
- **ENHANCED: Improved table configuration and validation**
- Proper indexes and capacity settings

initial_setup/data_processor.py:
- Processes Kaggle movie dataset (movies_metadata.csv, credits.csv, ratings.csv)
- **UPDATED: Enhanced data validation and processing**
- Cleans and transforms data for DynamoDB storage
- Handles ~45,000 movies and ~26M ratings
- Improved error handling and data quality checks

initial_setup/generate_embeddings.py:
- **UPDATED: ONNX-optimized embedding generation**
- Generates movie embeddings using sentence transformers
- Saves embeddings in .npz format (384 embeddings + 1 movie_id column)
- Uploads to S3 bucket "movieembeddings" for efficient access
- Integration with centralized configuration

initial_setup/convert_to_onnx.py:
- **NEW: ONNX model conversion** for optimized inference
- Converts sentence transformer models to ONNX format
- Eliminates need for heavy sentence-transformers dependency in Lambda
- Uploads ONNX models to S3 for runtime access

initial_setup/api_gateway_setup.py:
- **NEW: HTTP API Gateway setup script**
- Automated setup for HTTP API Gateway (not REST API)
- Creates integrations and routes for single Lambda function
- Configures CORS and authentication settings

LAMBDA LAYERS ARCHITECTURE:
==========================

Layer 1 (MovieRecommenderLayer1):
- PyJWT: JSON Web Token handling
- bcrypt: Password hashing
- onnxruntime: ONNX model inference
- tokenizers: Text tokenization for embeddings

Layer 2 (MovieRecommenderLayer2):
- numpy<1.27.0: Numerical computations with version constraint
- Required for embedding operations and similarity calculations

UTILITIES:
==========

utils/database.py:
- DynamoDB helper functions and connection utilities
- Common database operations for all Lambda functions
- Error handling and retry logic
- Table scanning and querying utilities

utils/utils_function.py:
- Shared utility functions across Lambda functions
- JSON response formatting
- Error handling and logging utilities
- Common validation and data processing functions

requirements.txt:
- Python dependencies for all backend components
- Includes boto3, sentence-transformers, pandas, numpy
- JWT handling, bcrypt for password hashing
- AWS SDK and data processing libraries



DOCUMENTATION:
==============

doc/README.md:
- Complete project setup and usage guide
- API endpoint documentation
- Database schema and architecture overview
- Local development and testing instructions

doc/DEPLOYMENT_GUIDE.md:
- Step-by-step AWS deployment instructions
- Infrastructure setup and configuration
- Lambda function deployment and API Gateway setup
- Monitoring, troubleshooting, and maintenance procedures

doc/api.yaml:
- OpenAPI 3.0 specification for all endpoints
- Complete API documentation with request/response schemas
- Authentication requirements and error responses
- Integration documentation for frontend developers

doc/PROJECT_DOCUMENTATION.tex:
- Comprehensive technical documentation in LaTeX format
- Architecture diagrams and system design details
- Algorithm explanations and implementation details
- Academic-style documentation for technical review

doc/files.txt:
- This file - complete project structure overview
- File-by-file description of functionality
- Organization and relationship between components
