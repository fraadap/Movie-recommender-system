openapi: 3.0.0
info:
  title: Movie Recommender API
  description: |
    API for the Movie Recommender System

    **Key Features:**
    - Single Lambda function with unified routing
    - ONNX-optimized semantic search
    - Content-based recommendations with weighted ratings
    - Collaborative filtering
    - JWT authentication and user management
    - HTTP API Gateway (not REST)
    
    **Architecture:**
    - Single Lambda function (lambda_handler.py) with centralized routing
    - Lambda layers for dependencies (PyJWT, bcrypt, onnxruntime, numpy)
    - ONNX models stored in S3 bucket "movieembeddings"
    - Embeddings in .npz format (384 embeddings + 1 movie_id column)
    - DynamoDB tables for data persistence
    
  version: 2.0.0
servers:
  - url: https://{apiId}.execute-api.{region}.amazonaws.com
    description: AWS HTTP API Gateway endpoint
    variables:
      apiId:
        description: API Gateway ID
        default: your-api-id
      region:
        description: AWS Region
        default: us-east-1

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Movie:
      type: object
      properties:
        movie_id:
          type: string
          example: "123"
        title:
          type: string
          example: "Mission: Impossible"
        overview:
          type: string
          example: "An American agent..."
        vote_average:
          type: number
          format: float
          example: 7.5
        release_year:
          type: integer
          example: 1996
    User:
      type: object
      properties:
        user_id:
          type: string
          example: "user123"
        username:
          type: string
          example: "moviefan"
        email:
          type: string
          example: "user@example.com"
    AuthResponse:
      type: object
      properties:
        access_token:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        refresh_token:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        user:
          $ref: '#/components/schemas/User'
    Review:
      type: object
      properties:
        review_id:
          type: string
          example: "review123"
        user_id:
          type: string
          example: "user123"
        movie_id:
          type: string
          example: "123"
        rating:
          type: number
          format: float
          minimum: 1
          maximum: 5
          example: 4.5
        comment:
          type: string
          example: "Great movie!"
        timestamp:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"
    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          example: "Invalid request"

paths:
  /auth/register:
    post:
      summary: Register a new user
      description: Create a new user account with username, email, and password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - email
                - password
              properties:
                username:
                  type: string
                  example: "moviefan"
                  description: Unique username for the user
                email:
                  type: string
                  format: email
                  example: "user@example.com"
                  description: User's email address
                password:
                  type: string
                  example: "securePassword123"
                  description: User's password (will be hashed)
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: Invalid input or user already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/login:
    post:
      summary: User login
      description: Authenticate user with username/email and password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - password
              properties:
                username:
                  type: string
                  example: "moviefan"
                  description: Username or email
                password:
                  type: string
                  example: "securePassword123"
                  description: User's password
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/refresh:
    post:
      summary: Refresh access token
      description: Get a new access token using a valid refresh token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - refresh_token
              properties:
                refresh_token:
                  type: string
                  example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                  description: Valid refresh token
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        '401':
          description: Invalid or expired refresh token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /search:
    post:
      summary: Search for movies using semantic search
      description: |
        Perform semantic search for movies based on a text query using ONNX-optimized AI embeddings.
        
        **Model**: Uses ONNX runtime for fast inference without sentence-transformers dependency
        **Storage**: Embeddings stored in .npz format in S3 (movieembeddings bucket)
        **Algorithm**: Cosine similarity between query embedding and pre-computed movie embeddings
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - query
              properties:
                query:
                  type: string
                  example: "action movies with Tom Cruise"
                  description: Text query for semantic movie search
                top_k:
                  type: integer
                  default: 10
                  example: 10
                  description: Number of movies to return
      responses:
        '200':
          description: Search completed successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Movie'
        '400':
          description: Missing or invalid query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /content:
    post:
      summary: Get content-based recommendations
      description: |
        Get movie recommendations based on content similarity from movie IDs with ratings.
        
        **Input Format**: Array of [movie_id, rating] tuples
        **Algorithm**: Weighted average of embeddings based on user ratings
        **ONNX Optimized**: Uses pre-computed embeddings for fast similarity calculation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - movie_ids
              properties:
                movie_ids:
                  type: array
                  items:
                    type: array
                    items:
                      oneOf:
                        - type: string
                        - type: number
                    minItems: 2
                    maxItems: 2
                  example: [["123", 4.5], ["456", 3.0], ["789", 5.0]]
                  description: Array of [movie_id, rating] tuples
                top_k:
                  type: integer
                  default: 10
                  example: 10
                  description: Number of recommendations to return
      responses:
        '200':
          description: Content-based recommendations retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Movie'
        '400':
          description: Missing or invalid movie_ids parameter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /collaborative:
    post:
      summary: Get collaborative filtering recommendations
      description: Get personalized movie recommendations based on collaborative filtering using user preferences
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                top_k:
                  type: integer
                  default: 10
                  example: 10
                  description: Number of recommendations to return
      responses:
        '200':
          description: Collaborative filtering recommendations retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Movie'
        '401':
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /similar:
    post:
      summary: Get similar movies
      description: Find movies similar to a given movie using content-based similarity
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - movie_id
              properties:
                movie_id:
                  type: string
                  example: "123"
                  description: ID of the reference movie
                top_k:
                  type: integer
                  default: 10
                  example: 10
                  description: Number of similar movies to return
      responses:
        '200':
          description: Similar movies retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Movie'
        '400':
          description: Missing or invalid movie_id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Movie not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /favorites:
    get:
      summary: Get user's favorite movies
      description: Retrieve the list of movies marked as favorites by the authenticated user
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Favorites retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Movie'
        '401':
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    post:
      summary: Add movie to favorites
      description: Add a movie to the authenticated user's favorites list
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - movie_id
              properties:
                movie_id:
                  type: string
                  example: "123"
                  description: ID of the movie to add to favorites
      responses:
        '200':
          description: Movie added to favorites successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Movie added to favorites"
        '400':
          description: Missing movie_id or movie already in favorites
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /favorites/{movie_id}:
    get:
      summary: Check if movie is in favorites
      description: Check whether a specific movie is in the authenticated user's favorites
      security:
        - bearerAuth: []
      parameters:
        - name: movie_id
          in: path
          required: true
          schema:
            type: string
          example: "123"
          description: ID of the movie to check
      responses:
        '200':
          description: Favorite status retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  is_favorite:
                    type: boolean
                    example: true
        '401':
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      summary: Remove movie from favorites
      description: Remove a movie from the authenticated user's favorites list
      security:
        - bearerAuth: []
      parameters:
        - name: movie_id
          in: path
          required: true
          schema:
            type: string
          example: "123"
          description: ID of the movie to remove from favorites
      responses:
        '200':
          description: Movie removed from favorites successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Movie removed from favorites"
        '400':
          description: Movie not in favorites
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /reviews:
    get:
      summary: Get reviews for a movie
      description: Retrieve all reviews for a specific movie
      parameters:
        - name: movie_id
          in: query
          required: true
          schema:
            type: string
          example: "123"
          description: ID of the movie to get reviews for
      responses:
        '200':
          description: Reviews retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Review'
        '400':
          description: Missing movie_id parameter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    post:
      summary: Add a review
      description: Add a review and rating for a movie by the authenticated user
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - movie_id
                - rating
              properties:
                movie_id:
                  type: string
                  example: "123"
                  description: ID of the movie to review
                rating:
                  type: number
                  format: float
                  minimum: 1
                  maximum: 5
                  example: 4.5
                  description: Rating for the movie (1-5)
                comment:
                  type: string
                  example: "Great movie with excellent acting!"
                  description: Optional review comment
      responses:
        '201':
          description: Review added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
        '400':
          description: Missing required fields or invalid rating
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /reviews/{review_id}:
    delete:
      summary: Remove a review
      description: Remove a review by the authenticated user
      security:
        - bearerAuth: []
      parameters:
        - name: review_id
          in: path
          required: true
          schema:
            type: string
          example: "review123"
          description: ID of the review to remove
      responses:
        '200':
          description: Review removed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Review removed successfully"
        '401':
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Not authorized to delete this review
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Review not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /activity:
    get:
      summary: Get user activity
      description: Retrieve the authenticated user's activity history (reviews, favorites)
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User activity retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  reviews:
                    type: array
                    items:
                      $ref: '#/components/schemas/Review'
                  favorites:
                    type: array
                    items:
                      $ref: '#/components/schemas/Movie'
        '401':
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
