openapi: 3.0.0
info:
  title: Movie Recommender API
  description: API for the Movie Recommender System
  version: 1.0.0
servers:
  - url: https://{apiId}.execute-api.{region}.amazonaws.com/prod
    variables:
      apiId:
        description: API Gateway ID
        default: your-api-id
      region:
        description: AWS Region
        default: eu-west-1

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Movie:
      type: object
      properties:
        movie_id:
          type: string
          example: "123"
        title:
          type: string
          example: "Mission: Impossible"
        overview:
          type: string
          example: "An American agent..."
        vote_average:
          type: number
          format: float
          example: 7.5
        release_year:
          type: integer
          example: 1996
        poster_path:
          type: string
          example: "/path/to/poster.jpg"
        score:
          type: number
          format: float
          example: 0.95
        genres:
          type: array
          items:
            type: string
          example: ["Adventure", "Action", "Thriller"]

paths:
  /search:
    post:
      summary: Search for movies
      description: Perform semantic search for movies based on a text query
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - query
              properties:
                query:
                  type: string
                  example: "action movies with Tom Cruise"
                top_k:
                  type: integer
                  default: 10
                  example: 10
      responses:
        '200':
          description: Successful search
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Movie'

  /recommend:
    post:
      summary: Get movie recommendations
      description: Get personalized movie recommendations
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: string
                  example: "user123"
                top_k:
                  type: integer
                  default: 10
                genre:
                  type: string
                  example: "Action"
      responses:
        '200':
          description: Successful recommendations
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Movie'

  /content:
    post:
      summary: Get content-based recommendations
      description: Get content-based recommendations
      requestBody: 
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - movie_ids
              properties:
                movie_ids:
                  type: array
                  items:
                    type: string
                  example: ["123", "456"]
                top_k:
                  type: integer
                  default: 10
      responses:
        '200':
          description: Movie details retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Movie'

  /collaborative:
    post:
      summary: Get recommendations based on collaborative filtering
      description: Get recommendations based on collaborative filtering
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - user_id
              properties:
                user_id:
                  type: string
                  example: "123"
                top_k:
                  type: integer
                  default: 10
      responses:
        '200':
          description: Recommended movies based on collaborative filtering
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Movie'

  /auth/login:
    post:
      summary: User login
      description: Authenticate user and get JWT token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: "user@example.com"
                password:
                  type: string
                  format: password
                  example: "password123"
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: "jwt-token-here"
                  user:
                    type: object
                    properties:
                      id:
                        type: string
                        example: "user123"
                      name:
                        type: string
                        example: "John Doe"
                      email:
                        type: string
                        format: email
                        example: "user@example.com"
                      created_at:
                        type: integer
                        example: 1620000000

  /auth/register:
    post:
      summary: User registration
      description: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - email
                - password
              properties:
                name:
                  type: string
                  example: "John Doe"
                email:
                  type: string
                  format: email
                  example: "user@example.com"
                password:
                  type: string
                  format: password
                  example: "password123"
      responses:
        '201':
          description: Registration successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                  user:
                    type: object
                    properties:
                      id:
                        type: string
                      name:
                        type: string
                      email:
                        type: string
                      created_at:
                        type: integer

  /auth/profile:
    put:
      summary: Update user profile
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                  format: email
      responses:
        '200':
          description: Profile updated successfully

  /auth/password:
    put:
      summary: Change password
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - current_password
                - new_password
              properties:
                current_password:
                  type: string
                new_password:
                  type: string
      responses:
        '200':
          description: Password changed successfully

  /auth/refresh:
    post:
      summary: Refresh JWT token
      description: Get a new JWT token using an existing valid token
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: "new-jwt-token-here"
                  user:
                    type: object
                    properties:
                      id:
                        type: string
                        example: "user123"
                      name:
                        type: string
                        example: "John Doe"
                      email:
                        type: string
                        format: email
                        example: "user@example.com"
                      created_at:
                        type: integer
                        example: 1620000000

  /user-data/favorites:
    get:
      summary: Get user favorites
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of favorite movies
          content:
            application/json:
              schema:
                type: object
                properties:
                  movies:
                    type: array
                    items:
                      type: object
                      properties:
                        user_id:
                          type: string
                        movie_id:
                          type: string
                        created_at:
                          type: integer
    post:
      summary: Add movie to favorites
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - movieId
              properties:
                movieId:
                  type: string
      responses:
        '200':
          description: Movie added to favorites

  /user-data/favorites/toggle:
    post:
      summary: Toggle movie favorite status
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - movieId
              properties:
                movieId:
                  type: string
      responses:
        '200':
          description: Favorite status toggled
          content:
            application/json:
              schema:
                type: object
                properties:
                  isFavorite:
                    type: boolean
                  message:
                    type: string

  /user-data/watched:
    get:
      summary: Get watched movies
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of watched movies
          content:
            application/json:
              schema:
                type: object
                properties:
                  movies:
                    type: array
                    items:
                      type: object
                      properties:
                        user_id:
                          type: string
                        movie_id:
                          type: string
                        watched_at:
                          type: integer
    post:
      summary: Add movie to watched list
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - movieId
              properties:
                movieId:
                  type: string
      responses:
        '200':
          description: Movie added to watched list

  /user-data/favorites/{movieId}:
    delete:
      summary: Remove movie from favorites
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: movieId
          required: true
          schema:
            type: string
          description: ID of the movie to remove from favorites
      responses:
        '200':
          description: Movie removed from favorites
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Movie removed from favorites"

  /user-data/watched/{movieId}:
    delete:
      summary: Remove movie from watched list
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: movieId
          required: true
          schema:
            type: string
          description: ID of the movie to remove from watched list
      responses:
        '200':
          description: Movie removed from watched list
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Movie removed from watched list"

  /user/preferences:
    get:
      summary: Get user preferences
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User preferences
          content:
            application/json:
              schema:
                type: object
                properties:
                  favorite_genres:
                    type: array
                    items:
                      type: string
                  language:
                    type: string
    put:
      summary: Update user preferences
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                favorite_genres:
                  type: array
                  items:
                    type: string
                language:
                  type: string
      responses:
        '200':
          description: Preferences updated successfully

  /user/activity:
    get:
      summary: Get user activity history
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User activity history
          content:
            application/json:
              schema:
                type: object
                properties:
                  activities:
                    type: array
                    items:
                      type: object
                      properties:
                        user_id:
                          type: string
                        timestamp:
                          type: integer
                        action:
                          type: string
                        data:
                          type: object
  /user/account:
    delete:
      summary: Delete user account
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: password
          required: true
          schema:
            type: string
          description: Current password to confirm account deletion
      responses:
        '200':
          description: Account deleted successfully
